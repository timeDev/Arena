/*global require, module, exports */
module.exports = (function() {
    /*
     * Generated by PEG.js 0.8.0.
     *
     * http://pegjs.majda.cz/
     */

    function peg$subclass(child, parent) {
        function ctor() { this.constructor = child; }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
    }

    function SyntaxError(message, expected, found, offset, line, column) {
        this.message  = message;
        this.expected = expected;
        this.found    = found;
        this.offset   = offset;
        this.line     = line;
        this.column   = column;

        this.name     = "SyntaxError";
    }

    peg$subclass(SyntaxError, Error);

    function parse(input) {
        var options = arguments.length > 1 ? arguments[1] : {},

            peg$FAILED = {},

            peg$startRuleFunctions = { start: peg$parsestart },
            peg$startRuleFunction  = peg$parsestart,

            peg$c0 = [],
            peg$c1 = peg$FAILED,
            peg$c2 = "(",
            peg$c3 = { type: "literal", value: "(", description: "\"(\"" },
            peg$c4 = ")",
            peg$c5 = { type: "literal", value: ")", description: "\")\"" },
            peg$c6 = function(b) {return {type:'block', body:b}},
            peg$c7 = function(c) {return c},
            peg$c8 = "->",
            peg$c9 = { type: "literal", value: "->", description: "\"->\"" },
            peg$c10 = function(c) {return {type:'ret', body:c}},
            peg$c11 = "$",
            peg$c12 = { type: "literal", value: "$", description: "\"$\"" },
            peg$c13 = "=",
            peg$c14 = { type: "literal", value: "=", description: "\"=\"" },
            peg$c15 = function(n, v) {return {type:'ass', name:n, value:v}},
            peg$c16 = ";",
            peg$c17 = { type: "literal", value: ";", description: "\";\"" },
            peg$c18 = function(n, a) {return {type:'cmd', name:n, args:a}},
            peg$c19 = /^[A-Za-z]/,
            peg$c20 = { type: "class", value: "[A-Za-z]", description: "[A-Za-z]" },
            peg$c21 = /^[A-Za-z0-9_]/,
            peg$c22 = { type: "class", value: "[A-Za-z0-9_]", description: "[A-Za-z0-9_]" },
            peg$c23 = function(arg) {return arg},
            peg$c24 = /^[A-Za-z0-9$_]/,
            peg$c25 = { type: "class", value: "[A-Za-z0-9$_]", description: "[A-Za-z0-9$_]" },
            peg$c26 = "\"",
            peg$c27 = { type: "literal", value: "\"", description: "\"\\\"\"" },
            peg$c28 = /^[^"]/,
            peg$c29 = { type: "class", value: "[^\"]", description: "[^\"]" },
            peg$c30 = function(s) {return s},
            peg$c31 = null,
            peg$c32 = /^[+\-]/,
            peg$c33 = { type: "class", value: "[+\\-]", description: "[+\\-]" },
            peg$c34 = /^[0-9]/,
            peg$c35 = { type: "class", value: "[0-9]", description: "[0-9]" },
            peg$c36 = ".",
            peg$c37 = { type: "literal", value: ".", description: "\".\"" },
            peg$c38 = function(n) {return parseFloat(n)},
            peg$c39 = "{",
            peg$c40 = { type: "literal", value: "{", description: "\"{\"" },
            peg$c41 = "}",
            peg$c42 = { type: "literal", value: "}", description: "\"}\"" },
            peg$c43 = function(b) {return {type:'fn', body:b}},
            peg$c44 = "[",
            peg$c45 = { type: "literal", value: "[", description: "\"[\"" },
            peg$c46 = "]",
            peg$c47 = { type: "literal", value: "]", description: "\"]\"" },
            peg$c48 = function(b) {return {type:'expr', body:b}},
            peg$c49 = function(b) {return b},
            peg$c50 = "&&",
            peg$c51 = { type: "literal", value: "&&", description: "\"&&\"" },
            peg$c52 = function(l, r) {return {type:'&&', l:l,r:r}},
            peg$c53 = "||",
            peg$c54 = { type: "literal", value: "||", description: "\"||\"" },
            peg$c55 = function(l, r) {return {type:'||', l:l,r:r}},
            peg$c56 = "==",
            peg$c57 = { type: "literal", value: "==", description: "\"==\"" },
            peg$c58 = function(l, r) {return {type:'==', l:l,r:r}},
            peg$c59 = "!=",
            peg$c60 = { type: "literal", value: "!=", description: "\"!=\"" },
            peg$c61 = function(l, r) {return {type:'!=', l:l,r:r}},
            peg$c62 = ">",
            peg$c63 = { type: "literal", value: ">", description: "\">\"" },
            peg$c64 = function(l, r) {return {type:'>', l:l,r:r}},
            peg$c65 = "<",
            peg$c66 = { type: "literal", value: "<", description: "\"<\"" },
            peg$c67 = function(l, r) {return {type:'<', l:l,r:r}},
            peg$c68 = ">=",
            peg$c69 = { type: "literal", value: ">=", description: "\">=\"" },
            peg$c70 = function(l, r) {return {type:'>=', l:l,r:r}},
            peg$c71 = "<=",
            peg$c72 = { type: "literal", value: "<=", description: "\"<=\"" },
            peg$c73 = function(l, r) {return {type:'<=', l:l,r:r}},
            peg$c74 = "+",
            peg$c75 = { type: "literal", value: "+", description: "\"+\"" },
            peg$c76 = function(l, r) {return {type:'+', l:l,r:r}},
            peg$c77 = "-",
            peg$c78 = { type: "literal", value: "-", description: "\"-\"" },
            peg$c79 = function(l, r) {return {type:'-', l:l,r:r}},
            peg$c80 = "*",
            peg$c81 = { type: "literal", value: "*", description: "\"*\"" },
            peg$c82 = function(l, r) {return {type:'*', l:l,r:r}},
            peg$c83 = "/",
            peg$c84 = { type: "literal", value: "/", description: "\"/\"" },
            peg$c85 = function(l, r) {return {type:'/', l:l,r:r}},
            peg$c86 = "%",
            peg$c87 = { type: "literal", value: "%", description: "\"%\"" },
            peg$c88 = function(l, r) {return {type:'%', l:l,r:r}},
            peg$c89 = function(v) { return {type:'u-', v:v}},
            peg$c90 = "!",
            peg$c91 = { type: "literal", value: "!", description: "\"!\"" },
            peg$c92 = function(v) { return {type:'u!', v:v}},
            peg$c93 = "#",
            peg$c94 = { type: "literal", value: "#", description: "\"#\"" },
            peg$c95 = /^[^#]/,
            peg$c96 = { type: "class", value: "[^#]", description: "[^#]" },
            peg$c97 = /^[ \n\r\t]/,
            peg$c98 = { type: "class", value: "[ \\n\\r\\t]", description: "[ \\n\\r\\t]" },

            peg$currPos          = 0,
            peg$reportedPos      = 0,
            peg$cachedPos        = 0,
            peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
            peg$maxFailPos       = 0,
            peg$maxFailExpected  = [],
            peg$silentFails      = 0,

            peg$result;

        if ("startRule" in options) {
            if (!(options.startRule in peg$startRuleFunctions)) {
                throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
            }

            peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
        }

        function text() {
            return input.substring(peg$reportedPos, peg$currPos);
        }

        function offset() {
            return peg$reportedPos;
        }

        function line() {
            return peg$computePosDetails(peg$reportedPos).line;
        }

        function column() {
            return peg$computePosDetails(peg$reportedPos).column;
        }

        function expected(description) {
            throw peg$buildException(
                null,
                [{ type: "other", description: description }],
                peg$reportedPos
            );
        }

        function error(message) {
            throw peg$buildException(message, null, peg$reportedPos);
        }

        function peg$computePosDetails(pos) {
            function advance(details, startPos, endPos) {
                var p, ch;

                for (p = startPos; p < endPos; p++) {
                    ch = input.charAt(p);
                    if (ch === "\n") {
                        if (!details.seenCR) { details.line++; }
                        details.column = 1;
                        details.seenCR = false;
                    } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
                        details.line++;
                        details.column = 1;
                        details.seenCR = true;
                    } else {
                        details.column++;
                        details.seenCR = false;
                    }
                }
            }

            if (peg$cachedPos !== pos) {
                if (peg$cachedPos > pos) {
                    peg$cachedPos = 0;
                    peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
                }
                advance(peg$cachedPosDetails, peg$cachedPos, pos);
                peg$cachedPos = pos;
            }

            return peg$cachedPosDetails;
        }

        function peg$fail(expected) {
            if (peg$currPos < peg$maxFailPos) { return; }

            if (peg$currPos > peg$maxFailPos) {
                peg$maxFailPos = peg$currPos;
                peg$maxFailExpected = [];
            }

            peg$maxFailExpected.push(expected);
        }

        function peg$buildException(message, expected, pos) {
            function cleanupExpected(expected) {
                var i = 1;

                expected.sort(function(a, b) {
                    if (a.description < b.description) {
                        return -1;
                    } else if (a.description > b.description) {
                        return 1;
                    } else {
                        return 0;
                    }
                });

                while (i < expected.length) {
                    if (expected[i - 1] === expected[i]) {
                        expected.splice(i, 1);
                    } else {
                        i++;
                    }
                }
            }

            function buildMessage(expected, found) {
                function stringEscape(s) {
                    function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

                    return s
                        .replace(/\\/g,   '\\\\')
                        .replace(/"/g,    '\\"')
                        .replace(/\x08/g, '\\b')
                        .replace(/\t/g,   '\\t')
                        .replace(/\n/g,   '\\n')
                        .replace(/\f/g,   '\\f')
                        .replace(/\r/g,   '\\r')
                        .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
                        .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
                        .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
                        .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
                }

                var expectedDescs = new Array(expected.length),
                    expectedDesc, foundDesc, i;

                for (i = 0; i < expected.length; i++) {
                    expectedDescs[i] = expected[i].description;
                }

                expectedDesc = expected.length > 1
                    ? expectedDescs.slice(0, -1).join(", ")
                + " or "
                + expectedDescs[expected.length - 1]
                    : expectedDescs[0];

                foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

                return "Expected " + expectedDesc + " but " + foundDesc + " found.";
            }

            var posDetails = peg$computePosDetails(pos),
                found      = pos < input.length ? input.charAt(pos) : null;

            if (expected !== null) {
                cleanupExpected(expected);
            }

            return new SyntaxError(
                message !== null ? message : buildMessage(expected, found),
                expected,
                found,
                pos,
                posDetails.line,
                posDetails.column
            );
        }

        function peg$parsestart() {
            var s0, s1;

            s0 = [];
            s1 = peg$parsecmdline();
            if (s1 !== peg$FAILED) {
                while (s1 !== peg$FAILED) {
                    s0.push(s1);
                    s1 = peg$parsecmdline();
                }
            } else {
                s0 = peg$c1;
            }

            return s0;
        }

        function peg$parsecommandblock() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 40) {
                s1 = peg$c2;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c3); }
            }
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parsecmdline();
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parsecmdline();
                }
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                        s3 = peg$c4;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c5); }
                    }
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c6(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c1;
            }

            return s0;
        }

        function peg$parsecmdline() {
            var s0, s1, s2, s3, s4, s5, s6, s7;

            s0 = peg$currPos;
            s1 = peg$parsewsc();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsecommandblock();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsewsc();
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c7(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c1;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsewsc();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsecommand();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsewsc();
                        if (s3 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c7(s2);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parsewsc();
                    if (s1 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c8) {
                            s2 = peg$c8;
                            peg$currPos += 2;
                        } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c9); }
                        }
                        if (s2 !== peg$FAILED) {
                            s3 = peg$parsewsc();
                            if (s3 !== peg$FAILED) {
                                s4 = peg$parsecmdline();
                                if (s4 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c10(s4);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c1;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parsewsc();
                        if (s1 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 36) {
                                s2 = peg$c11;
                                peg$currPos++;
                            } else {
                                s2 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c12); }
                            }
                            if (s2 !== peg$FAILED) {
                                s3 = peg$parsename();
                                if (s3 !== peg$FAILED) {
                                    s4 = peg$parsewsc();
                                    if (s4 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 61) {
                                            s5 = peg$c13;
                                            peg$currPos++;
                                        } else {
                                            s5 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c14); }
                                        }
                                        if (s5 !== peg$FAILED) {
                                            s6 = peg$parsewsc();
                                            if (s6 !== peg$FAILED) {
                                                s7 = peg$parsevalue();
                                                if (s7 !== peg$FAILED) {
                                                    peg$reportedPos = s0;
                                                    s1 = peg$c15(s3, s7);
                                                    s0 = s1;
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c1;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$c1;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$c1;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c1;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c1;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    }
                }
            }

            return s0;
        }

        function peg$parsecommand() {
            var s0, s1, s2, s3;

            if (input.charCodeAt(peg$currPos) === 59) {
                s0 = peg$c16;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c17); }
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsename();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsewsc();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseargs();
                        if (s3 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c18(s1, s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }
            }

            return s0;
        }

        function peg$parsename() {
            var s0, s1, s2, s3, s4;

            s0 = peg$currPos;
            s1 = peg$currPos;
            if (peg$c19.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c20); }
            }
            if (s2 !== peg$FAILED) {
                s3 = [];
                if (peg$c21.test(input.charAt(peg$currPos))) {
                    s4 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c22); }
                }
                while (s4 !== peg$FAILED) {
                    s3.push(s4);
                    if (peg$c21.test(input.charAt(peg$currPos))) {
                        s4 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c22); }
                    }
                }
                if (s3 !== peg$FAILED) {
                    s2 = [s2, s3];
                    s1 = s2;
                } else {
                    peg$currPos = s1;
                    s1 = peg$c1;
                }
            } else {
                peg$currPos = s1;
                s1 = peg$c1;
            }
            if (s1 !== peg$FAILED) {
                s1 = input.substring(s0, peg$currPos);
            }
            s0 = s1;

            return s0;
        }

        function peg$parseargs() {
            var s0, s1, s2, s3;

            s0 = [];
            s1 = peg$currPos;
            s2 = peg$parsevalue();
            if (s2 !== peg$FAILED) {
                s3 = peg$parsewsc();
                if (s3 !== peg$FAILED) {
                    peg$reportedPos = s1;
                    s2 = peg$c23(s2);
                    s1 = s2;
                } else {
                    peg$currPos = s1;
                    s1 = peg$c1;
                }
            } else {
                peg$currPos = s1;
                s1 = peg$c1;
            }
            while (s1 !== peg$FAILED) {
                s0.push(s1);
                s1 = peg$currPos;
                s2 = peg$parsevalue();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsewsc();
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s1;
                        s2 = peg$c23(s2);
                        s1 = s2;
                    } else {
                        peg$currPos = s1;
                        s1 = peg$c1;
                    }
                } else {
                    peg$currPos = s1;
                    s1 = peg$c1;
                }
            }

            return s0;
        }

        function peg$parsevalue() {
            var s0;

            s0 = peg$parsevariable();
            if (s0 === peg$FAILED) {
                s0 = peg$parsestring();
                if (s0 === peg$FAILED) {
                    s0 = peg$parsenumber();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parsefunction();
                        if (s0 === peg$FAILED) {
                            s0 = peg$parseexpression();
                        }
                    }
                }
            }

            return s0;
        }

        function peg$parsevariable() {
            var s0, s1, s2, s3, s4;

            s0 = peg$currPos;
            s1 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 36) {
                s2 = peg$c11;
                peg$currPos++;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c12); }
            }
            if (s2 !== peg$FAILED) {
                s3 = [];
                if (peg$c24.test(input.charAt(peg$currPos))) {
                    s4 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c25); }
                }
                while (s4 !== peg$FAILED) {
                    s3.push(s4);
                    if (peg$c24.test(input.charAt(peg$currPos))) {
                        s4 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c25); }
                    }
                }
                if (s3 !== peg$FAILED) {
                    s2 = [s2, s3];
                    s1 = s2;
                } else {
                    peg$currPos = s1;
                    s1 = peg$c1;
                }
            } else {
                peg$currPos = s1;
                s1 = peg$c1;
            }
            if (s1 !== peg$FAILED) {
                s1 = input.substring(s0, peg$currPos);
            }
            s0 = s1;

            return s0;
        }

        function peg$parsestring() {
            var s0, s1, s2, s3, s4;

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 34) {
                s1 = peg$c26;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c27); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$currPos;
                s3 = [];
                if (peg$c28.test(input.charAt(peg$currPos))) {
                    s4 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c29); }
                }
                while (s4 !== peg$FAILED) {
                    s3.push(s4);
                    if (peg$c28.test(input.charAt(peg$currPos))) {
                        s4 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c29); }
                    }
                }
                if (s3 !== peg$FAILED) {
                    s3 = input.substring(s2, peg$currPos);
                }
                s2 = s3;
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 34) {
                        s3 = peg$c26;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c27); }
                    }
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c30(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c1;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = [];
                if (peg$c19.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c20); }
                }
                if (s2 !== peg$FAILED) {
                    while (s2 !== peg$FAILED) {
                        s1.push(s2);
                        if (peg$c19.test(input.charAt(peg$currPos))) {
                            s2 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c20); }
                        }
                    }
                } else {
                    s1 = peg$c1;
                }
                if (s1 !== peg$FAILED) {
                    s1 = input.substring(s0, peg$currPos);
                }
                s0 = s1;
            }

            return s0;
        }

        function peg$parsenumber() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8;

            s0 = peg$currPos;
            s1 = peg$currPos;
            s2 = peg$currPos;
            if (peg$c32.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c33); }
            }
            if (s3 === peg$FAILED) {
                s3 = peg$c31;
            }
            if (s3 !== peg$FAILED) {
                s4 = [];
                if (peg$c34.test(input.charAt(peg$currPos))) {
                    s5 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c35); }
                }
                if (s5 !== peg$FAILED) {
                    while (s5 !== peg$FAILED) {
                        s4.push(s5);
                        if (peg$c34.test(input.charAt(peg$currPos))) {
                            s5 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c35); }
                        }
                    }
                } else {
                    s4 = peg$c1;
                }
                if (s4 !== peg$FAILED) {
                    s5 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 46) {
                        s6 = peg$c36;
                        peg$currPos++;
                    } else {
                        s6 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c37); }
                    }
                    if (s6 !== peg$FAILED) {
                        s7 = [];
                        if (peg$c34.test(input.charAt(peg$currPos))) {
                            s8 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s8 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c35); }
                        }
                        if (s8 !== peg$FAILED) {
                            while (s8 !== peg$FAILED) {
                                s7.push(s8);
                                if (peg$c34.test(input.charAt(peg$currPos))) {
                                    s8 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                } else {
                                    s8 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c35); }
                                }
                            }
                        } else {
                            s7 = peg$c1;
                        }
                        if (s7 !== peg$FAILED) {
                            s6 = [s6, s7];
                            s5 = s6;
                        } else {
                            peg$currPos = s5;
                            s5 = peg$c1;
                        }
                    } else {
                        peg$currPos = s5;
                        s5 = peg$c1;
                    }
                    if (s5 === peg$FAILED) {
                        s5 = peg$c31;
                    }
                    if (s5 !== peg$FAILED) {
                        s3 = [s3, s4, s5];
                        s2 = s3;
                    } else {
                        peg$currPos = s2;
                        s2 = peg$c1;
                    }
                } else {
                    peg$currPos = s2;
                    s2 = peg$c1;
                }
            } else {
                peg$currPos = s2;
                s2 = peg$c1;
            }
            if (s2 !== peg$FAILED) {
                s2 = input.substring(s1, peg$currPos);
            }
            s1 = s2;
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c38(s1);
            }
            s0 = s1;

            return s0;
        }

        function peg$parsefunction() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 123) {
                s1 = peg$c39;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c40); }
            }
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parsecmdline();
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parsecmdline();
                }
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 125) {
                        s3 = peg$c41;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c42); }
                    }
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c43(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c1;
            }

            return s0;
        }

        function peg$parseexpression() {
            var s0, s1, s2, s3, s4, s5;

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 91) {
                s1 = peg$c44;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c45); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsewsc();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsecmdline();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsewsc();
                        if (s4 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 93) {
                                s5 = peg$c46;
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c47); }
                            }
                            if (s5 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c48(s3);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c1;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 91) {
                    s1 = peg$c44;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c45); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsewsc();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parselogicop();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsewsc();
                            if (s4 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 93) {
                                    s5 = peg$c46;
                                    peg$currPos++;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c47); }
                                }
                                if (s5 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c49(s3);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c1;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }
            }

            return s0;
        }

        function peg$parselogicop() {
            var s0, s1, s2, s3, s4, s5;

            s0 = peg$currPos;
            s1 = peg$parseeqop();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsewsc();
                if (s2 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c50) {
                        s3 = peg$c50;
                        peg$currPos += 2;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c51); }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsewsc();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parselogicop();
                            if (s5 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c52(s1, s5);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c1;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseeqop();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsewsc();
                    if (s2 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c53) {
                            s3 = peg$c53;
                            peg$currPos += 2;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c54); }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsewsc();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parselogicop();
                                if (s5 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c55(s1, s5);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c1;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$parseeqop();
                }
            }

            return s0;
        }

        function peg$parseeqop() {
            var s0, s1, s2, s3, s4, s5;

            s0 = peg$currPos;
            s1 = peg$parseaddop();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsewsc();
                if (s2 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c56) {
                        s3 = peg$c56;
                        peg$currPos += 2;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c57); }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsewsc();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseeqop();
                            if (s5 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c58(s1, s5);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c1;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseaddop();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsewsc();
                    if (s2 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c59) {
                            s3 = peg$c59;
                            peg$currPos += 2;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c60); }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsewsc();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parseeqop();
                                if (s5 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c61(s1, s5);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c1;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseaddop();
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parsewsc();
                        if (s2 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 62) {
                                s3 = peg$c62;
                                peg$currPos++;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c63); }
                            }
                            if (s3 !== peg$FAILED) {
                                s4 = peg$parsewsc();
                                if (s4 !== peg$FAILED) {
                                    s5 = peg$parseeqop();
                                    if (s5 !== peg$FAILED) {
                                        peg$reportedPos = s0;
                                        s1 = peg$c64(s1, s5);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c1;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c1;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseaddop();
                        if (s1 !== peg$FAILED) {
                            s2 = peg$parsewsc();
                            if (s2 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 60) {
                                    s3 = peg$c65;
                                    peg$currPos++;
                                } else {
                                    s3 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c66); }
                                }
                                if (s3 !== peg$FAILED) {
                                    s4 = peg$parsewsc();
                                    if (s4 !== peg$FAILED) {
                                        s5 = peg$parseeqop();
                                        if (s5 !== peg$FAILED) {
                                            peg$reportedPos = s0;
                                            s1 = peg$c67(s1, s5);
                                            s0 = s1;
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$c1;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c1;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c1;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parseaddop();
                            if (s1 !== peg$FAILED) {
                                s2 = peg$parsewsc();
                                if (s2 !== peg$FAILED) {
                                    if (input.substr(peg$currPos, 2) === peg$c68) {
                                        s3 = peg$c68;
                                        peg$currPos += 2;
                                    } else {
                                        s3 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c69); }
                                    }
                                    if (s3 !== peg$FAILED) {
                                        s4 = peg$parsewsc();
                                        if (s4 !== peg$FAILED) {
                                            s5 = peg$parseeqop();
                                            if (s5 !== peg$FAILED) {
                                                peg$reportedPos = s0;
                                                s1 = peg$c70(s1, s5);
                                                s0 = s1;
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$c1;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$c1;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c1;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c1;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                            }
                            if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = peg$parseaddop();
                                if (s1 !== peg$FAILED) {
                                    s2 = peg$parsewsc();
                                    if (s2 !== peg$FAILED) {
                                        if (input.substr(peg$currPos, 2) === peg$c71) {
                                            s3 = peg$c71;
                                            peg$currPos += 2;
                                        } else {
                                            s3 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c72); }
                                        }
                                        if (s3 !== peg$FAILED) {
                                            s4 = peg$parsewsc();
                                            if (s4 !== peg$FAILED) {
                                                s5 = peg$parseeqop();
                                                if (s5 !== peg$FAILED) {
                                                    peg$reportedPos = s0;
                                                    s1 = peg$c73(s1, s5);
                                                    s0 = s1;
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c1;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$c1;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$c1;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c1;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c1;
                                }
                                if (s0 === peg$FAILED) {
                                    s0 = peg$parseaddop();
                                }
                            }
                        }
                    }
                }
            }

            return s0;
        }

        function peg$parseaddop() {
            var s0, s1, s2, s3, s4, s5;

            s0 = peg$currPos;
            s1 = peg$parsemultop();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsewsc();
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 43) {
                        s3 = peg$c74;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c75); }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsewsc();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseaddop();
                            if (s5 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c76(s1, s5);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c1;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsemultop();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsewsc();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 45) {
                            s3 = peg$c77;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c78); }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsewsc();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parseaddop();
                                if (s5 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c79(s1, s5);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c1;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$parsemultop();
                }
            }

            return s0;
        }

        function peg$parsemultop() {
            var s0, s1, s2, s3, s4, s5;

            s0 = peg$currPos;
            s1 = peg$parseunary();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsewsc();
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 42) {
                        s3 = peg$c80;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c81); }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsewsc();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parsemultop();
                            if (s5 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c82(s1, s5);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c1;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseunary();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsewsc();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 47) {
                            s3 = peg$c83;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c84); }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsewsc();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsemultop();
                                if (s5 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c85(s1, s5);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c1;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseunary();
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parsewsc();
                        if (s2 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 37) {
                                s3 = peg$c86;
                                peg$currPos++;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c87); }
                            }
                            if (s3 !== peg$FAILED) {
                                s4 = peg$parsewsc();
                                if (s4 !== peg$FAILED) {
                                    s5 = peg$parsemultop();
                                    if (s5 !== peg$FAILED) {
                                        peg$reportedPos = s0;
                                        s1 = peg$c88(s1, s5);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c1;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c1;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseunary();
                    }
                }
            }

            return s0;
        }

        function peg$parseunary() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 45) {
                s1 = peg$c77;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c78); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsewsc();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsevalue();
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c89(s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c1;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 33) {
                    s1 = peg$c90;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c91); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsewsc();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseunary();
                        if (s3 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c92(s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$parsevalue();
                }
            }

            return s0;
        }

        function peg$parsewsc() {
            var s0, s1;

            s0 = [];
            s1 = peg$parsecomment();
            if (s1 === peg$FAILED) {
                s1 = peg$parsews();
            }
            while (s1 !== peg$FAILED) {
                s0.push(s1);
                s1 = peg$parsecomment();
                if (s1 === peg$FAILED) {
                    s1 = peg$parsews();
                }
            }

            return s0;
        }

        function peg$parsecomment() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 35) {
                s1 = peg$c93;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c94); }
            }
            if (s1 !== peg$FAILED) {
                s2 = [];
                if (peg$c95.test(input.charAt(peg$currPos))) {
                    s3 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c96); }
                }
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    if (peg$c95.test(input.charAt(peg$currPos))) {
                        s3 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c96); }
                    }
                }
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 35) {
                        s3 = peg$c93;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c94); }
                    }
                    if (s3 !== peg$FAILED) {
                        s1 = [s1, s2, s3];
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c1;
            }

            return s0;
        }

        function peg$parsews() {
            var s0;

            if (peg$c97.test(input.charAt(peg$currPos))) {
                s0 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c98); }
            }

            return s0;
        }

        peg$result = peg$startRuleFunction();

        if (peg$result !== peg$FAILED && peg$currPos === input.length) {
            return peg$result;
        } else {
            if (peg$result !== peg$FAILED && peg$currPos < input.length) {
                peg$fail({ type: "end", description: "end of input" });
            }

            throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
        }
    }

    return {
        SyntaxError: SyntaxError,
        parse:       parse
    };
})();